// netlify/functions/webhook.js

export async function handler(event, context) {
  const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
  const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;

  // โ Facebook verification
  if (event.httpMethod === "GET") {
    const params = event.queryStringParameters;
    if (params["hub.verify_token"] === VERIFY_TOKEN) {
      return {
        statusCode: 200,
        body: params["hub.challenge"],
      };
    }
    return { statusCode: 403, body: "Forbidden" };
  }

  // โ Handle incoming messages and postbacks
  if (event.httpMethod === "POST") {
    const body = JSON.parse(event.body);

    if (body.object === "page") {
      for (const entry of body.entry) {
        const webhookEvent = entry.messaging[0];
        const senderId = webhookEvent.sender.id;

        if (webhookEvent.message) {
          const userMsg = webhookEvent.message.text ? webhookEvent.message.text.trim().toLowerCase() : '';
          const quickReplyPayload = webhookEvent.message.quick_reply ? webhookEvent.message.quick_reply.payload : null;

          console.log("๐ฉ User message:", userMsg);
          console.log("๐ฌ Quick reply payload:", quickReplyPayload);
          
          let replyText = "";
          
          if (quickReplyPayload) {
            // Handle quick reply payloads
            switch (quickReplyPayload) {
              case "CHECK_BALANCE":
                replyText = "๐ ููุนุฑูุฉ ุฑุตูุฏู ุงูุญุงููุ ุงุทูุจ ุงูููุฏ: #222*";
                break;
              case "CHECK_NUMBER":
                replyText = "๐ฑ ููุนุฑูุฉ ุฑููู ูู ููุจูููุณุ ุงุทูุจ ุงูููุฏ: #101*";
                break;
              case "RECHARGE_CARD":
                replyText = "๐ ูุดุญู ุฑุตูุฏู ุจุงุณุชุนูุงู ุงูุจุทุงูุฉ: ุงุทูุจ ุงูููุฏ #ุฑูู ุงููุงุฑุช*111*";
                break;
              case "RECHARGE_VOICE":
                replyText = "๐ ูุดุญู ุฑุตูุฏู ุนุจุฑ ุงูููุงููุฉ: ุงุชุตู ุนูู ุงูุฑูู 111 ุซู ุงุฎุชุฑ 1 ุจุนุฏูุง ุฃุฏุฎู ุงูุฃุฑูุงู.";
                break;
              case "CRIDILIS":
                replyText = "๐ฐ ูุทูุจ ุฑุตูุฏ ุจุงูุฏูู (CridiLIS) ุจูููุฉ 20ุ 50ุ ุฃู 100 ุฏุฌ: ุงุทูุจ ุงูููุฏ #ุงููุจูุบ*3*662*";
                break;
              case "HOW_TO_TRANSFER":
                replyText = "๐ ูุชุญููู ุฑุตูุฏ (ููููุณู): ุงุทูุจ ุงูููุฏ #ุงูุฑูู ุงูุณุฑู*ุงููุจูุบ*ุฑูู ุงููุงุชู*610*";
                break;
              case "ACTIVATE_TRANSFER":
                replyText = "๐ ูุชูุนูู ุฎุฏูุฉ ุชุญููู ุงูุฑุตูุฏ (ููููุณู) ุฃูู ูุฑุฉ: ุงุทูุจ ุงูููุฏ *#610";
                break;
              case "PACKAGES_AND_OFFERS":
                replyText = "๐ ููุนุฑูุฉ ูู ุงูุนุฑูุถ ูุงูุจุงูุงุช ุงูููููุฉุ ุงูุฃุณุจูุนูุฉุ ูุงูุดูุฑูุฉุ ุงุทูุจ ุงูููุฏ #600*";
                break;
              case "CALL_ME_BACK":
                replyText = "๐ฌ ูุฅุฑุณุงู ุฑุณุงูุฉ 'ููููู ุดูุฑุงู'ุ ุงุทูุจ ุงูููุฏ #ุฑูู ุงููุฑุณู ุฅููู*606*";
                break;
              case "OUT_OF_COVERAGE":
                replyText = "๐ซ ูุชูุนูู ุฎุฏูุฉ 'ูุบูู ุฃู ุฎุงุฑุฌ ุงูุชุบุทูุฉ'ุ ุงุทูุจ ุงูููุฏ #0662*21*";
                break;
              case "OUT_OF_COVERAGE_CANCEL":
                replyText = "โ ูุฅูุบุงุก ุฎุฏูุฉ 'ูุบูู ุฃู ุฎุงุฑุฌ ุงูุชุบุทูุฉ'ุ ุงุทูุจ ุงูููุฏ #002* ุฃู #21#";
                break;
              case "WRONG_NUMBER":
                replyText = "โ ูุชูุนูู ุฎุฏูุฉ 'ุงูุฑูู ุฎุงุทุฆ ุฃู ุบูุฑ ููุฌูุฏ'ุ ุงุทูุจ ุงูููุฏ #0000*21*";
                break;
              case "CALL_FORWARDING":
                replyText = "โก๏ธ ูุชุญููู ุงูููุงููุงุช ุฅูู ุฑูู ุขุฎุฑุ ุงุทูุจ ุงูููุฏ #ุงูุฑูู ุงููุฑุงุฏ ุงูุชุญููู ุฅููู*21*";
                break;
              case "CALL_FORWARDING_CANCEL":
                replyText = "โ ูุฅูุบุงุก ุฎุฏูุฉ ุชุญููู ุงูููุงููุงุชุ ุงุทูุจ ุงูููุฏ #21#";
                break;
              case "MISSED_CALLS":
                replyText = "โ๏ธ ูุชูุนูู ุฎุฏูุฉ ุงูููุงููุงุช ุงููุงุฆุชุฉุ ุงุทูุจ ุงูููุฏ #644*21*";
                break;
              case "MASK_NUMBER":
                replyText = "๐ ูุฅุฎูุงุก ุฑููู (ูุงุณู)ุ ุงุทูุจ ุงูููุฏ #31# ูุจู ุงูุฑูู ุงููุฑุงุฏ ุงูุงุชุตุงู ุจู.";
                break;
              case "CALL_WAITING":
                replyText = "โณ ูุชูุนูู ุฎุฏูุฉ ุงูุชุธุงุฑ ุงูููุงููุงุชุ ุงุทูุจ ุงูููุฏ #644*21*";
                break;
              case "CANCEL_RANATI":
                replyText = "๐ต ูุฅูุบุงุก ุฎุฏูุฉ 'ุฑูุชู'ุ ุฃุฑุณู ูููุฉ DES ุนุจุฑ ุฑุณุงูุฉ SMS ุฅูู ุงูุฑูู 680.";
                break;
              case "CUSTOMER_SERVICE_NUMBER":
                replyText = "๐ ููุชูุงุตู ูุน ุฎุฏูุฉ ุงูุฒุจุงุฆูุ ุงุชุตู ุนูู ุงูุฑูู 666 ุฃู 888.";
                break;
              case "MOBILIS_REGISTER":
                replyText = "๐ ููุชุณุฌูู ูู ููุจูููุณ ูุงูุญุตูู ุนูู 2Go ุฃู ุฃูุซุฑ: ุฃุฑุณู ุฑุณุงูุฉ SMS ุจุจุฑูุฏู ุงูุฅููุชุฑููู ุฅูู ุงูุฑูู 666. ุณุชุญุตู ุนูู ุงูุจุงูุฉ ุจุนุฏ 48 ุณุงุนุฉ. ููููู ุฃูุถุงู ุฒูุงุฑุฉ ุงูุฑุงุจุท: https://www.mobilis.dz/register";
                break;
              case "BALANCE_MENU":
                await sendQuickReplies(senderId, PAGE_ACCESS_TOKEN, "ูุงุฐุง ุชูุฏ ุฃู ุชุนุฑู ุนู ุงูุฑุตูุฏุ", [
                  { title: "๐ ุงูุฑุตูุฏ ุงูุญุงูู", payload: "CHECK_BALANCE" },
                  { title: "๐ฑ ูุนุฑูุฉ ุงูุฑูู", payload: "CHECK_NUMBER" },
                  { title: "๐ ุดุญู ุงูุฑุตูุฏ", payload: "RECHARGE_MENU" },
                  { title: "๐ฐ ุฑุตูุฏ ุจุงูุฏูู", payload: "CRIDILIS" }
                ]);
                continue;
              case "RECHARGE_MENU":
                await sendQuickReplies(senderId, PAGE_ACCESS_TOKEN, "ุงุฎุชุฑ ุทุฑููุฉ ุดุญู ุงูุฑุตูุฏ:", [
                  { title: "๐ณ ุจุงุณุชุนูุงู ุงูุจุทุงูุฉ", payload: "RECHARGE_CARD" },
                  { title: "๐ ุจุงูุงุชุตุงู", payload: "RECHARGE_VOICE" }
                ]);
                continue;
              case "TRANSFER_MENU":
                await sendQuickReplies(senderId, PAGE_ACCESS_TOKEN, "ูุงุฐุง ุชูุฏ ุฃู ุชุนุฑู ุนู ุชุญููู ุงูุฑุตูุฏ (ููููุณู)ุ", [
                  { title: "๐ ุทุฑููุฉ ุงูุชุญููู", payload: "HOW_TO_TRANSFER" },
                  { title: "๐ ุชูุนูู ุงูุฎุฏูุฉ", payload: "ACTIVATE_TRANSFER" }
                ]);
                continue;
              case "PACKAGES_MENU":
                await sendQuickReplies(senderId, PAGE_ACCESS_TOKEN, "ุงุฎุชุฑ ูุง ููุงุณุจู:", [
                  { title: "๐ ุงูุนุฑูุถ ูุงูุจุงูุงุช", payload: "PACKAGES_AND_OFFERS" },
                  { title: "๐ ุชุณุฌูู ููุจูููุณ", payload: "MOBILIS_REGISTER" }
                ]);
                continue;
              case "ADDITIONAL_SERVICES_MENU":
                await sendQuickReplies(senderId, PAGE_ACCESS_TOKEN, "ุงุฎุชุฑ ูู ุงูุฎุฏูุงุช ุงูุฅุถุงููุฉ:", [
                  { title: "๐ฌ ููููู ุดูุฑุงู", payload: "CALL_ME_BACK" },
                  { title: "๐ซ ูุบูู / ุฎุงุฑุฌ ุงูุชุบุทูุฉ", payload: "OUT_OF_COVERAGE" },
                  { title: "โ ุฅูุบุงุก ุฎุฏูุงุช", payload: "CANCEL_SERVICES_MENU" }
                ]);
                continue;
              case "CANCEL_SERVICES_MENU":
                await sendQuickReplies(senderId, PAGE_ACCESS_TOKEN, "ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงูุชู ุชุฑูุฏ ุฅูุบุงุกูุง:", [
                  { title: "โก๏ธ ุชุญููู ุงูููุงููุงุช", payload: "CALL_FORWARDING_CANCEL" },
                  { title: "๐ซ ูุบูู", payload: "OUT_OF_COVERAGE_CANCEL" },
                  { title: "๐ต ุฑูุชู", payload: "CANCEL_RANATI" }
                ]);
                continue;
              default:
                replyText = "ุฃููุงู ุจู! ููู ูููููู ูุณุงุนุฏุชูุ";
            }
          } else {
            // โ ุงูุฑุฏูุฏ ุงูุงุฌุชูุงุนูุฉ ูุงูุฅูุณุงููุฉ
            if (userMsg.includes("ูููู") || userMsg.includes("ูุงุด ุฑุงู") || userMsg.includes("ุนุงูู ุงูู")) {
              replyText = "๐ ุงูุญูุฏ ููู ุจุฎูุฑุ ุดูุฑุงู ูุณุคุงูู. ูุงูุช ููู ุญุงููุ";
            } else if (userMsg.includes("ุตุจุงุญ ุงูุฎูุฑ")) {
              replyText = "โ๏ธ ุตุจุงุญ ุงูููุฑ! ุฃุชููู ูู ูููุงู ุฌูููุงู ููุจุงุฑูุงู.";
            } else if (userMsg.includes("ูุณุงุก ุงูุฎูุฑ")) {
              replyText = "๐ ูุณุงุก ุงููุฑุฏ ูุงููุงุณููู.";
            } else if (userMsg.includes("ุชุตุจุญ ุนูู ุฎูุฑ")) {
              replyText = "๐ ุชุตุจุญ ุนูู ุฎูุฑ ูุฃุญูุงู ุณุนูุฏุฉ.";
            } else if (userMsg.includes("ุชูุงู") || userMsg.includes("ุจุฎูุฑ") || userMsg.includes("ุงูุญูุฏ ููู")) {
              replyText = "๐ ุฑุงุฆุน! ูุณุนุฏูู ุณูุงุน ุฐูู.";
            } else if (userMsg.includes("ุดูุฑุงู") || userMsg.includes("ุนููุงู") || userMsg.includes("thanks")) {
              replyText = "๐น ุนูู ุงูุฑุญุจ ูุงูุณุนุฉุ ูุญู ุฏุงุฆูุงู ูู ุฎุฏูุชู.";
            } else if (userMsg.includes("ุฃุญุจู") || userMsg.includes("ูุญุจู")) {
              replyText = "โค๏ธ ูุฃูุง ูุญุจู ุจุฒุงู! ุดูุฑุงู ุนูู ููุงูู ุงูุทูุจ.";
            } else if (userMsg.includes("๐") || userMsg.includes("ููู") || userMsg.includes("lol")) {
              replyText = "๐คฃ ูุงูุง! ุถุญูุชูู ูุงููู.";
            } else if (userMsg.includes("๐ฅบ") || userMsg.includes("ุญุฒูู") || userMsg.includes("ุฒุนูุงู")) {
              replyText = "๐ ูุง ุชุฒุนูุ ุฅู ุดุงุก ุงููู ูู ุดูุก ูุชุตูุญ.";
            } else if (userMsg.includes("ุบุจู") || userMsg.includes("ูุง ุชููู")) {
              replyText = "๐ ุฃูุง ูุฌุฑุฏ ุฑูุจูุช ุฃุญุงูู ุงููุณุงุนุฏุฉ. ุณุฃุญุงูู ุฃู ุฃูููู ุจุดูู ุฃูุถู ูู ุงููุฑุฉ ุงููุงุฏูุฉ.";
            } else if (userMsg.includes("ูู ุงูุช") || userMsg.includes("ูู ุชููู")) {
              replyText = "ุฃูุง ุฑูุจูุช ููุจูููุณุ ูููุชู ูู ูุณุงุนุฏุชู ูู ูู ูุง ูุฎุต ุฎุฏูุงุช ุงูุดุฑูุฉ. ๐";
            }
            // โ ุงูุฑุฏูุฏ ุงูุฎุงุตุฉ ุจุงูุฎุฏูุงุช
            else if (userMsg.includes("ุงููุงุฆูุฉ") || userMsg.includes("ุฎุฏูุงุช")) {
              await sendQuickReplies(senderId, PAGE_ACCESS_TOKEN, "ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงูุชู ุชูุงุณุจู ๐:", [
                { title: "๐ฐ ุงูุฑุตูุฏ ููุนุฑูุฉ ุงูุฑูู", payload: "BALANCE_MENU" },
                { title: "๐ ุชุญููู ุงูุฑุตูุฏ (ููููุณู)", payload: "TRANSFER_MENU" },
                { title: "๐ ุงูุนุฑูุถ ูุงูุจุงูุงุช", payload: "PACKAGES_MENU" },
                { title: "๐ ุฎุฏูุงุช ุฅุถุงููุฉ", payload: "ADDITIONAL_SERVICES_MENU" }
              ]);
              continue;
            } else if (userMsg.includes("ูุนุฑูุฉ ุงูุฑุตูุฏ") || userMsg.includes("ุฑุตูุฏ") || userMsg.includes("solde")) {
              replyText = "๐ ููุนุฑูุฉ ุฑุตูุฏู ุงูุญุงููุ ุงุทูุจ ุงูููุฏ: #222*";
            } else if (userMsg.includes("ุดุญู ุงูุฑุตูุฏ") || userMsg.includes("ุชุนุจุฆุฉ") || userMsg.includes("recharge")) {
              replyText = "๐ ูุดุญู ุฑุตูุฏู ุจุงุณุชุนูุงู ุงููุงุฑุช: ุงุทูุจ ุงูููุฏ #ุฑูู ุงููุงุฑุช*111*";
            } else if (userMsg.includes("ุชุญููู ุงูุฑุตูุฏ") || userMsg.includes("ููููุณู") || userMsg.includes("transfert")) {
              replyText = "๐ ูุชุญููู ุฑุตูุฏ (ููููุณู): ุงุทูุจ #ุงูุฑูู ุงูุณุฑู*ุงููุจูุบ*ุฑูู ุงููุงุชู*610*";
            } else if (userMsg.includes("ุงูุจุงูุงุช") || userMsg.includes("ุงูุนุฑูุถ")) {
              replyText = "๐ ููุนุฑูุฉ ูู ุงูุนุฑูุถ ูุงูุจุงูุงุชุ ุงุทูุจ ุงูููุฏ #600*";
            } else if (userMsg.includes("ููููู ุดูุฑุงู") || userMsg.includes("call me back")) {
              replyText = "๐ฌ ูุฅุฑุณุงู ุฑุณุงูุฉ 'ููููู ุดูุฑุงู'ุ ุงุทูุจ ุงูููุฏ #ุฑูู ุงููุงุชู*606*";
            } else if (userMsg.includes("ุชุญููู ุงูููุงููุงุช") || userMsg.includes("ุฑููููุง")) {
              replyText = "โก๏ธ ูุชุญููู ุงูููุงููุงุช ุฅูู ุฑูู ุขุฎุฑุ ุงุทูุจ ุงูููุฏ #ุงูุฑูู*21*";
            } else if (userMsg.includes("ูุนุฑูุฉ ุงูุฑูู")) {
              replyText = "๐ฑ ููุนุฑูุฉ ุฑูููุ ุงุทูุจ ุงูููุฏ #101*";
            } else if (userMsg.includes("ุฎุฏูุฉ ุงูุฒุจุงุฆู")) {
              replyText = "๐ ููุชูุงุตู ูุน ุฎุฏูุฉ ุงูุฒุจุงุฆูุ ุงุชุตู ุนูู ุงูุฑูู 666 ุฃู 888.";
            } else {
              replyText = "ุฃููุงู ุจู ูู ุฎุฏูุฉ ุนููุงุก ููุจูููุณ ๐ุ ููู ูููููู ูุณุงุนุฏุชูุ";
            }
          }

          if (replyText) {
            await sendMessage(senderId, replyText, PAGE_ACCESS_TOKEN);
          }
        } else if (webhookEvent.postback && webhookEvent.postback.payload === "GET_STARTED_PAYLOAD") {
            const welcomeText = "ุฃููุงู ุจู ูู ุฑูุจูุช ููุจูููุณ! ๐ ููู ูููููู ูุณุงุนุฏุชู ุงููููุ";
            await sendMessage(senderId, welcomeText, PAGE_ACCESS_TOKEN);
        }
      }
      return { statusCode: 200, body: "EVENT_RECEIVED" };
    }
    return { statusCode: 404, body: "Not Found" };
  }

  return { statusCode: 405, body: "Method Not Allowed" };
}

// ๐น Function to send a regular text message
async function sendMessage(senderId, text, token) {
  await fetch(`https://graph.facebook.com/v16.0/me/messages?access_token=${token}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      recipient: { id: senderId },
      message: { text },
    }),
  });
}

// ๐น Function to send quick replies
async function sendQuickReplies(senderId, token, text, quickReplies) {
  await fetch(`https://graph.facebook.com/v16.0/me/messages?access_token=${token}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      recipient: { id: senderId },
      message: {
        text: text,
        quick_replies: quickReplies.map(qr => ({
          content_type: "text",
          title: qr.title,
          payload: qr.payload
        }))
      }
    }),
  });
}
